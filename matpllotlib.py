import sqlite3
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

current_fig = None  # Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u bi·ªÉu ƒë·ªì hi·ªán t·∫°i

# === C√ÅC BI·ªÇU ƒê·ªí ===

def show_category_product_comparison():
    global current_fig
    con = sqlite3.connect('ims.db')
    cur = con.cursor()
    cur.execute("SELECT name FROM category")
    categories = [cat[0] for cat in cur.fetchall()]
    data = {}
    for category in categories:
        cur.execute("SELECT COUNT(*) FROM product WHERE category = ?", (category,))
        data[category] = cur.fetchone()[0]
    con.close()

    current_fig = plt.figure(figsize=(10, 6))
    plt.bar(data.keys(), data.values(), color='skyblue')
    plt.xlabel('Danh m·ª•c s·∫£n ph·∫©m')
    plt.ylabel('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m')
    plt.title('So s√°nh s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo danh m·ª•c')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def show_supplier_product_comparison():
    global current_fig
    con = sqlite3.connect('ims.db')
    cur = con.cursor()
    cur.execute("SELECT DISTINCT supplier FROM product")
    suppliers = [row[0] for row in cur.fetchall()]
    data = {}
    for supplier in suppliers:
        cur.execute("SELECT COUNT(*) FROM product WHERE supplier = ?", (supplier,))
        data[supplier] = cur.fetchone()[0]
    con.close()

    current_fig = plt.figure(figsize=(10, 6))
    plt.bar(data.keys(), data.values(), color='orange')
    plt.xlabel('Nh√† cung c·∫•p')
    plt.ylabel('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m')
    plt.title('So s√°nh s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo nh√† cung c·∫•p')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def show_product_status_pie():
    global current_fig
    con = sqlite3.connect('ims.db')
    cur = con.cursor()
    cur.execute("SELECT status, COUNT(*) FROM product GROUP BY status")
    data = cur.fetchall()
    labels = [row[0] for row in data]
    sizes = [row[1] for row in data]
    con.close()

    current_fig = plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=['lightgreen', 'lightcoral'])
    plt.title('T·ª∑ l·ªá t√¨nh tr·∫°ng s·∫£n ph·∫©m')
    plt.axis('equal')
    plt.show()

def show_employee_salary():
    global current_fig
    con = sqlite3.connect('ims.db')
    cur = con.cursor()
    cur.execute("SELECT name, salary FROM employee")
    data = cur.fetchall()
    names = [row[0] for row in data]
    salaries = [float(row[1]) if row[1] else 0 for row in data]
    con.close()

    current_fig = plt.figure(figsize=(10, 6))
    plt.bar(names, salaries, color='purple')
    plt.xlabel('Nh√¢n vi√™n')
    plt.ylabel('L∆∞∆°ng')
    plt.title('L∆∞∆°ng c·ªßa nh√¢n vi√™n')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# === H√ÄM L∆ØU BI·ªÇU ƒê·ªí ===

def save_current_chart():
    global current_fig
    if current_fig:
        file_path = filedialog.asksaveasfilename(defaultextension='.png',
                                                 filetypes=[("PNG Image", "*.png")])
        if file_path:
            current_fig.savefig(file_path)
            messagebox.showinfo("Th√†nh c√¥ng", f"Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i:\n{file_path}")
    else:
        messagebox.showwarning("Ch∆∞a c√≥ bi·ªÉu ƒë·ªì", "Vui l√≤ng hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr∆∞·ªõc khi l∆∞u!")

# === GIAO DI·ªÜN TKINTER ===

def open_gui():
    root = tk.Tk()
    root.title("üìä Tr√¨nh hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s·∫£n ph·∫©m")
    root.geometry("450x400")
    root.resizable(False, False)

    style = ttk.Style()
    style.configure('TButton', font=('Arial', 11), padding=6)
    style.configure('TLabel', font=('Arial', 13))

    main_frame = ttk.Frame(root, padding=20)
    main_frame.pack(fill='both', expand=True)

    ttk.Label(main_frame, text="üß≠ Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì ƒë·ªÉ hi·ªÉn th·ªã:", font=('Arial', 14, 'bold')).pack(pady=10)

    ttk.Button(main_frame, text="üì¶ S·∫£n ph·∫©m theo danh m·ª•c", command=show_category_product_comparison).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="üè¢ S·∫£n ph·∫©m theo nh√† cung c·∫•p", command=show_supplier_product_comparison).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="üìà T√¨nh tr·∫°ng s·∫£n ph·∫©m (Pie chart)", command=show_product_status_pie).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="üë§ L∆∞∆°ng nh√¢n vi√™n", command=show_employee_salary).pack(pady=5, fill='x')

    ttk.Separator(main_frame, orient='horizontal').pack(fill='x', pady=15)

    ttk.Button(main_frame, text="üíæ L∆∞u bi·ªÉu ƒë·ªì ƒëang m·ªü", command=save_current_chart).pack(pady=5, fill='x')

    ttk.Label(main_frame, text="¬© DoAn IMS - Bi·ªÉu ƒë·ªì d·ªØ li·ªáu", font=("Arial", 9)).pack(side='bottom', pady=10)

    root.mainloop()

if __name__ == "__main__":
    open_gui()
